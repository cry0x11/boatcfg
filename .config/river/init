#!/bin/bash

# ----------------------------
# VARIABLES
# ----------------------------

# I made these variables so I can center windows in rules.
# Refer to the end of file for window rules.

resolution=`wlr-randr | grep -A 1 --color=never "Modes:" | awk 'NR==2{print $1}'`
res_x=`echo $resolution | cut -d'x' -f1`
res_y=`echo $resolution | cut -d'x' -f2`

eww_height="32"     #This is used in the ugly mpv hack to center the window


# --------------------------------------------------------
# FUNCTIONS
# --------------------------------------------------------
# 
# NOTICE:
#
# bash sucks with whitespaces so if you try to make oneliner
# bash function you will have an error as } needs to be on 
# its own separate line.
#
# So, to make it oneliner you need ; at the end of the command
# in the function.
#
# see functions below...
#
function spawn () { riverctl map normal $1 $2 spawn "$3"; }

function rspawn () { 
    riverctl map recording None $1 spawn "$2"
    riverctl map -release recording None $1 spawn "$HOME/.scripts/modriver exit"
}

function map () { riverctl map normal $@; }
function rmap () { riverctl map recording $@; }

function pointer () { riverctl map-pointer normal $@; }
function tiler () { riverctl map normal $1 $2 send-layout-cmd wideriver "$3"; }

function tags () { 

    case $# in
        2)
            if [ $2 == all ]; then
                riverctl rule-add -app-id "$1" tags $(( (1 << 9) - 1 ))
            else
                riverctl rule-add -app-id "$1" tags $(( 1 << ($2-1) ))
            fi

            ;;
        3)
            if [ $3 == all ]; then
                riverctl rule-add -app-id "$1" -title "$2" tags $(( (1 << 9) - 1 ))
            else
                riverctl rule-add -app-id "$1" -title "$2" tags $(( 1 << ($3-1) ))
            fi

            ;;
    esac

}

function float () {
    if [ $2 == 0 ]; then
        case $# in
            2)
                riverctl rule-add -app-id "$1" float
                ;;
            4)
                riverctl rule-add -app-id "$1" float
                riverctl rule-add -app-id "$1" dimensions $3 $4
                ;;
            6)
                if [ $5 == center ];then
                    riverctl rule-add -app-id "$1" float
                    riverctl rule-add -app-id "$1" dimensions $3 $4
                    
                    if [ $1 == 'mpv' ]; then
                        riverctl rule-add -app-id "$1" position $((res_x/2 - $3/2)) $((res_y/2 - $4/2 +$eww_height))
                    else
                        riverctl rule-add -app-id "$1" position $((res_x/2 - $3/2)) $((res_y/2 - $4/2))
                    fi
                else
                    riverctl rule-add -app-id "$1" float
                    riverctl rule-add -app-id "$1" dimensions $3 $4
                    riverctl rule-add -app-id "$1" position $5 $6
                fi
                ;;
        esac
    else
        case $# in
            2)
                riverctl rule-add -app-id "$1" -title "$2" float
                ;;
            4)
                riverctl rule-add -app-id "$1" -title "$2" float
                riverctl rule-add -app-id "$1" -title "$2" dimensions $3 $4
                ;;
            6)
                if [ $5 == center ];then
                    riverctl rule-add -app-id "$1" -title "$2" float
                    riverctl rule-add -app-id "$1" -title "$2" dimensions $3 $4
                    if [ $1 == 'mpv' ]; then
                        riverctl rule-add -app-id "$1" position $((res_x/2 - $3/2)) $((res_y/2 - $4/2 + $eww_height))
                    else
                        riverctl rule-add -app-id "$1" position $((res_x/2 - $3/2)) $((res_y/2 - $4/2))
                    fi
                else
                    riverctl rule-add -app-id "$1" -title "$2" float
                    riverctl rule-add -app-id "$1" -title "$2" dimensions $3 $4
                    riverctl rule-add -app-id "$1" -title "$2" position $5 $6
                fi
                
                ;;
        esac
    fi
}

touchpad () {
    riverctl input $1 events enabled
    riverctl input $1 tap enabled
    riverctl input $1 drag enabled
    riverctl input $1 drag-lock disabled
    riverctl input $1 scroll-method edge
    riverctl input $1 disable-while-typing enabled
    riverctl input $1 tap-button-map left-right-middle
}


# --------------------------------------------------------
# RIVER SETTINGS
# --------------------------------------------------------
riverctl background-color 0x282828
riverctl focus-follows-cursor "always"
riverctl default-attach-mode "bottom"
riverctl set-repeat 50 300


# --------------------------------------------------------
# TILER (Wideriver)
# --------------------------------------------------------
# 
# SOURCE: https://github.com/alex-courtis/wideriver
#
# Here I'm using wideriver as it provides what I need:
#
# 1. layout toggling.
# 2. monocle layout.
# 3. per tag layouts.
# 4. gaps between windows.
#
# --------------------------------------------------------

riverctl default-layout wideriver

wideriver --layout left                             \
          --layout-alt  monocle                     \
          --stack even                              \
          --count-master 1                          \
          --ratio-master 0.55                       \
          --no-smart-gaps                           \
          --inner-gaps 6                            \
          --outer-gaps 6                            \
          --border-width-monocle 0                  \
          --border-color-focused "0xea6962"         \
          --border-color-unfocused "0x282828"       \
          --border-width 3 &


# --------------------------------------------------------
# TOUCHPADS
# --------------------------------------------------------

touchpad pointer-2-7-SynPS/2_Synaptics_TouchPad


# --------------------------------------------------------
# AUTOSTART
# --------------------------------------------------------

riverctl spawn "$HOME/.scripts/river-autostart"
riverctl spawn "dbus-update-activation-environment SEATD_SOCK DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=river"


# --------------------------------------------------------
# PROGRAMS
# --------------------------------------------------------

spawn Super P       keepassxc
spawn Super Return  footclient
spawn Super D       firefox
spawn Super A       "$HOME/.scripts/browser"

# My launcher with custom config
spawn Super R "~/.scripts/tofi-run"                 


# --------------------------------------------------------
# SHELL SCRIPTS
# --------------------------------------------------------


# Menu for nerd icons so i don't have to go to their website and pick icons
spawn Super S "$HOME/.scripts/scriptman"

# 
# XProp-like functionality ... not sufficient but it does the bare minimum 
# for picking the ID and Title of the window
# 
# it relies on ristate
# SOURCE: https://gitlab.com/snakedye/ristate
#
spawn Super+Shift P "$HOME/.scripts/riverprop"

# Power menu
spawn Super Q "$HOME/.scripts/power"

# 
# I get distracted when i use laptop during study sessions so I made 
# shortcuts for turning off/on the brightness quickly using numpad
#
# It will be better if i store current brightness instead in a file
# then toggling between it and 0 ... but maybe for the future
#
spawn None KP_Up "doas brightnessctl s 20%"
spawn None KP_Down "doas brightnessctl s 0%"

# launching LF file manager with foot window
spawn Super E "$HOME/.scripts/fileManager"

# 
# Adding bookmarks from primary clipboard
# or copying bookmarks from menu to clipboard
#
spawn Super B "$HOME/.scripts/bookmark q"
spawn Super+Shift B "$HOME/.scripts/bookmark a"

# paste contents of primary selection into clipboard
spawn Super V "$HOME/.scripts/clipboard q"

# 
# screenshotting using grim & slurp then pasting image
# to clipboard
#
# it makes it trivial for me to add images to Anki
#
spawn None Print "$HOME/.scripts/shotcopy shot copy"
spawn Shift Print "$HOME/.scripts/shotcopy shot region"
spawn Super Print "$HOME/.scripts/shotcopy shot full"

# Making media keys work as they should
spawn Super equal            "$HOME/.scripts/volumectl up"
spawn Super minus           "$HOME/.scripts/volumectl down"
spawn Super backslash           "$HOME/.scripts/volumectl toggle"
spawn Super bracketright    "$HOME/.scripts/brightctl up"
spawn Super bracketleft     "$HOME/.scripts/brightctl down"

# Toggling input methods using fcitx5
spawn Control Space "$HOME/.scripts/bar-modules/im c"


riverctl declare-mode recording

spawn None KP_Begin "$HOME/.scripts/modriver enter"

rspawn F "$HOME/.scripts/shotcopy rec full"
rspawn R "$HOME/.scripts/shotcopy rec region"
rspawn S "$HOME/.scripts/shotcopy rec stop"
rspawn X "$HOME/.scripts/shotcopy rec pause"
rspawn C "$HOME/.scripts/shotcopy rec continue"

riverctl map recording None KP_Begin spawn "$HOME/.scripts/modriver exit"

# --------------------------------------------------------
# WM BINDINGS
# --------------------------------------------------------
map Super+Shift Q exit                          # exit river
map Super W close                               # close focused
map Super K focus-view previous                 # focus previous
map Super J focus-view next                     # focus next
map Super+Shift K swap previous                 # move up in stack
map Super+Shift J swap next                     # move down in stack
map Super Period focus-output next              # focus next monitor
map Super Comma focus-output previous           # focus previous monitor
map Super+Shift Period send-to-output next      # send to next monitor
map Super+Shift Comma send-to-output previous   # send to previous monitor
map Super+Shift Return zoom                     # swap master and focused
map Super F toggle-float                        # toggle floating
map Super Space toggle-fullscreen               # toggle fullscreen
map Super+Shift 0 set-view-tags $(( (1 << 32)-1 ))     # pin focused to all tags 
map Alt Tab focus-previous-tags                 # toggle between previous tag and current one

map Super+Alt L move right 100                  # move floated focused right
map Super+Alt H move left 100                   # move floated focused left
map Super+Alt K move up 100                     # move floated focused up
map Super+Alt J move down 100                   # move floated focused down

map Super+Control L resize horizontal 50        # grow horizontally
map Super+Control H resize horizontal -50       # shrink horizontally
map Super+Control K resize vertical 50          # grow vertically
map Super+Control J resize vertical -50         # shrink vertically

for i in $(seq 1 9)
do
    tags=$((1 << ($i - 1)))
    map Super $i set-focused-tags $tags         # focus tag
    map Super+Shift $i set-view-tags $tags      # send focused to tag
done

# Mouse buttons' bindings. It's self-explainatory
pointer Super BTN_LEFT move-view
pointer Super BTN_RIGHT resize-view
pointer Super BTN_MIDDLE toggle-float


# --------------------------------------------------------
# TILER BINDINGS (wideriver)
# --------------------------------------------------------
tiler Super H "--ratio -0.05"       # resize left
tiler Super L "--ratio +0.05"       # resize right
tiler Super Tab "--layout-toggle"   # toggle layout


# --------------------------------------------------------
# WINDOW RULES
# --------------------------------------------------------
# Why did i do that in an ugly function? 
# ... yea aside from saving time ...
# 
# 1. Id is always required.
#
# 2. If I decide geometry it's always width & height 
#    combined.
#
# 3. Occasionally i may use position (only IF i decide 
#    geometry beforehand).
#
# 4. I don't wanna waste time trying to come up
#    with a complex function (maybe some time later??)
# --------------------------------------------------------
#
#       APP-ID                       APP-TITLE       W       H       X       Y 
float 'riverprop'                    0               400     250     5       40
float 'Anki'                         "Browse*"       1000    650    center   center
float 'Anki'                         "Statistics"    1000    650    center   center
float 'Anki'                        "Preferences"    1000    650    center   center
float 'Anki'           "Image Occlusion Enhanced*"   1200    650    center   center
float 'Anki'                         "Add"           500     650    center   center
float 'Gimp'              "Change Foreground Color"  500     500    center   center
float 'Firefox'      "Firefox - Choose User Profile" 1000    650    center   center
float 'mpv'                          0               1000    650    center   center
float 'Nsxiv'                        0
float 'org.fcitx.fcitx5-config-qt'   0
float 'nm-connection-editor'         0
float 'pavucontrol'                  0
float 'org.keepassxc.KeePassXC'      0


#    APP-ID                                 TAG
tags 'sioyek'                                1
tags 'Anki'          "* - Anki"              2
tags 'Firefox'       "Mozilla Firefox"       4
tags 'fileManager'                           6
tags 'Gimp'                                  7
tags 'org.telegram.desktop'                  8
